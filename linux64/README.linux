QSim Modifications to the Linux Kernel
======================================

This is a diff-by-diff guide to the changes that have been made to the Linux kernel for
QSim. These modifications fall into four broad categories:

  1. Disabling BIOS calls
  2. Bypassing PC hardware (primarily the APIC)
  3. QSim I/O support
  4. Added features (like telling QSim the current TID)

Disables BIOS traps because QSim does not have an equivalent to the PC BIOS.

  diff -u -r linux-2.6.34/arch/x86/boot/bioscall.S linux-2.6.34.qsim//arch/x86/boot/bioscall.S
  --- linux-2.6.34/arch/x86/boot/bioscall.S	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/boot/bioscall.S	2011-10-06 00:06:25.000000000 -0400
  @@ -18,6 +18,7 @@
          .globl	intcall
          .type	intcall, @function
   intcall:
  +        ret /* Return immediately. QSim provides no BIOS. */
          /* Self-modify the INT instruction.  Ugly, but works. */
          cmpb	%al, 3f
          je	1f

Skips call to init_heap() to avoid printing a warning. The QSim bootloader does not tell
the kernel it can use the heap. Also avoids early hardware initialization since QSim
provides none. Gets memory size through magic instruction interface and finally prints a
friendly message to let our users know that we are booting.

  diff -u -r linux-2.6.34/arch/x86/boot/main.c linux-2.6.34.qsim//arch/x86/boot/main.c
  --- linux-2.6.34/arch/x86/boot/main.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/boot/main.c	2011-10-06 01:16:04.000000000 -0400
  @@ -127,51 +127,41 @@

   void main(void)
   {
  +        unsigned ram_size;
  +
          /* First, copy the boot header into the "zeropage" */
          copy_boot_params();

  -	/* End of heap check */
  -	init_heap();
  -
          /* Make sure we have all the proper CPU support */
          if (validate_cpu()) {
                  puts("Unable to boot - please use a kernel appropriate "
                       "for your CPU.\n");
                  die();
          }
  -
  -	/* Tell the BIOS what CPU mode we intend to run in. */
  -	set_bios_mode();
  -
  -	/* Detect memory layout */
  -	detect_memory();
  -
  -	/* Set keyboard repeat rate (why?) */
  -	keyboard_set_repeat();
  -
  -	/* Query MCA information */
  -	query_mca();
  -
  -	/* Query Intel SpeedStep (IST) information */
  -	query_ist();
  -
  -	/* Query APM information */
  -#if defined(CONFIG_APM) || defined(CONFIG_APM_MODULE)
  -	query_apm_bios();
  -#endif
  -
  -	/* Query EDD information */
  -#if defined(CONFIG_EDD) || defined(CONFIG_EDD_MODULE)
  -	query_edd();
  -#endif
  -
  -	/* Set the video mode */
  -	set_video();
  +	/* Hard-code QSim memory layout. */
  +        boot_params.e820_entries = 3;
  +        boot_params.e820_map[0].addr = 0;
  +        boot_params.e820_map[0].size = 640*1024;
  +        boot_params.e820_map[0].type = 1;
  +
  +        boot_params.e820_map[1].addr = 640*1024;
  +        boot_params.e820_map[1].size = 384*1024;
  +        boot_params.e820_map[1].type = 5;
  +
  +	/* QSim: Use our magic CPUID to get RAM size. */
  +        asm("cpuid;":"=a"(ram_size):"a"(0x512e512e));
  +
  +        boot_params.e820_map[2].addr = 1024*1024;
  +        boot_params.e820_map[2].size = (ram_size-1)*1024*1024; 
  +        boot_params.e820_map[2].type = 1;

          /* Parse command line for 'quiet' and pass it to decompressor. */
          if (cmdline_find_option_bool("quiet"))
                  boot_params.hdr.loadflags |= QUIET_FLAG;

  +        /* QSim: Print our first early-boot message. */
  +        puts("QSim Linux Kernel booting...\n");
  +
          /* Do the last things and invoke protected mode */
          go_to_protected_mode();
   }

Replace BIOS-based early kernel text output with QSim console output.

  diff -u -r linux-2.6.34/arch/x86/boot/tty.c linux-2.6.34.qsim//arch/x86/boot/tty.c
  --- linux-2.6.34/arch/x86/boot/tty.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/boot/tty.c	2011-10-06 03:14:32.000000000 -0400
  @@ -23,17 +23,9 @@

   void __attribute__((section(".inittext"))) putchar(int ch)
   {
  -	struct biosregs ireg;
  -
  -	if (ch == '\n')
  -		putchar('\r');	/* \n -> \r\n */
  -
  -	initregs(&ireg);
  -	ireg.bx = 0x0007;
  -	ireg.cx = 0x0001;
  -	ireg.ah = 0x0e;
  -	ireg.al = ch;
  -	intcall(0x10, &ireg, NULL);
  +        /* Use the QSim console for this. */
  +        asm("cpuid;" : : "a" ((0xff&ch)|0xc501e000) :
  +            "%ebx", "%edx", "%ecx");
   }

   void __attribute__((section(".inittext"))) puts(const char *str)

Avoid attempting to calibrate the APIC timer, since QSim does not really provide one.

  diff -u -r linux-2.6.34/arch/x86/kernel/apic/apic.c linux-2.6.34.qsim//arch/x86/kernel/apic/apic.c
  --- linux-2.6.34/arch/x86/kernel/apic/apic.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/kernel/apic/apic.c	2011-10-06 02:35:34.000000000 -0400
  @@ -609,14 +609,6 @@
           */
          __setup_APIC_LVTT(0xffffffff, 0, 0);

  -	/* Let the interrupts run */
  -	local_irq_enable();
  -
  -	while (lapic_cal_loops <= LAPIC_CAL_LOOPS)
  -		cpu_relax();
  -
  -	local_irq_disable();
  -
          /* Restore the real event handler */
          global_clock_event->event_handler = real_handler;

  @@ -682,12 +674,9 @@
                  lapic_timer_setup(CLOCK_EVT_MODE_PERIODIC, levt);
                  lapic_cal_loops = -1;

  -		/* Let the interrupts run */
  +		/* Enable the interrupts without calibrating the APIC timer. */
                  local_irq_enable();

  -		while (lapic_cal_loops <= LAPIC_CAL_LOOPS)
  -			cpu_relax();
  -
                  /* Stop the lapic timer */
                  lapic_timer_setup(CLOCK_EVT_MODE_SHUTDOWN, levt);

  @@ -1874,10 +1863,12 @@
          num_processors++;
          cpu = cpumask_next_zero(-1, cpu_present_mask);

  -	if (version != apic_version[boot_cpu_physical_apicid])
  +	if (version != apic_version[boot_cpu_physical_apicid]) {
                  WARN_ONCE(1,
                          "ACPI: apic version mismatch, bootcpu: %x cpu %d: %x\n",
                          apic_version[boot_cpu_physical_apicid], cpu, version);
  +                apic_version[boot_cpu_physical_apicid] = version;
  +        }

          physid_set(apicid, phys_cpu_present_map);
          if (apicid == boot_cpu_physical_apicid) {

Replace inter-processor interrupt system with QSim's equivalent.

  diff -u -r linux-2.6.34/arch/x86/kernel/apic/ipi.c linux-2.6.34.qsim//arch/x86/kernel/apic/ipi.c
  --- linux-2.6.34/arch/x86/kernel/apic/ipi.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/kernel/apic/ipi.c	2011-10-06 00:28:17.000000000 -0400
  @@ -19,22 +19,22 @@
   #include <asm/proto.h>
   #include <asm/ipi.h>

  +static inline void QSIM_REMOTE_INTERRUPT(u16 cpu, unsigned char vec) {
  +  asm("cpuid;" : : "a"((vec|(cpu<<8))|0x1d000000) : "%ebx", "%edx", "%ecx");
  +}
  +
   void default_send_IPI_mask_sequence_phys(const struct cpumask *mask, int vector)
   {
          unsigned long query_cpu;
  -	unsigned long flags;

          /*
           * Hack. The clustered APIC addressing mode doesn't allow us to send
           * to an arbitrary mask, so I do a unicast to each CPU instead.
           * - mbligh
           */
  -	local_irq_save(flags);
          for_each_cpu(query_cpu, mask) {
  -		__default_send_IPI_dest_field(per_cpu(x86_cpu_to_apicid,
  -				query_cpu), vector, APIC_DEST_PHYSICAL);
  +          QSIM_REMOTE_INTERRUPT(query_cpu, vector);
          }
  -	local_irq_restore(flags);
   }

   void default_send_IPI_mask_allbutself_phys(const struct cpumask *mask,
  @@ -42,24 +42,19 @@
   {
          unsigned int this_cpu = smp_processor_id();
          unsigned int query_cpu;
  -	unsigned long flags;

          /* See Hack comment above */

  -	local_irq_save(flags);
          for_each_cpu(query_cpu, mask) {
                  if (query_cpu == this_cpu)
                          continue;
  -		__default_send_IPI_dest_field(per_cpu(x86_cpu_to_apicid,
  -				 query_cpu), vector, APIC_DEST_PHYSICAL);
  +		QSIM_REMOTE_INTERRUPT(query_cpu, vector);
          }
  -	local_irq_restore(flags);
   }

   void default_send_IPI_mask_sequence_logical(const struct cpumask *mask,
                                                   int vector)
   {
  -	unsigned long flags;
          unsigned int query_cpu;

          /*
  @@ -68,32 +63,24 @@
           * should be modified to do 1 message per cluster ID - mbligh
           */

  -	local_irq_save(flags);
  -	for_each_cpu(query_cpu, mask)
  -		__default_send_IPI_dest_field(
  -			apic->cpu_to_logical_apicid(query_cpu), vector,
  -			apic->dest_logical);
  -	local_irq_restore(flags);
  +	for_each_cpu(query_cpu, mask) {
  +	  QSIM_REMOTE_INTERRUPT(query_cpu, vector);
  +	}
   }

   void default_send_IPI_mask_allbutself_logical(const struct cpumask *mask,
                                                   int vector)
   {
  -	unsigned long flags;
          unsigned int query_cpu;
          unsigned int this_cpu = smp_processor_id();

          /* See Hack comment above */

  -	local_irq_save(flags);
          for_each_cpu(query_cpu, mask) {
                  if (query_cpu == this_cpu)
                          continue;
  -		__default_send_IPI_dest_field(
  -			apic->cpu_to_logical_apicid(query_cpu), vector,
  -			apic->dest_logical);
  -		}
  -	local_irq_restore(flags);
  +		QSIM_REMOTE_INTERRUPT(query_cpu, vector);
  +	}
   }

   #ifdef CONFIG_X86_32
  @@ -103,50 +90,30 @@
    */
   void default_send_IPI_mask_logical(const struct cpumask *cpumask, int vector)
   {
  -	unsigned long mask = cpumask_bits(cpumask)[0];
  -	unsigned long flags;
  -
  -	if (WARN_ONCE(!mask, "empty IPI mask"))
  -		return;
  -
  -	local_irq_save(flags);
  -	WARN_ON(mask & ~cpumask_bits(cpu_online_mask)[0]);
  -	__default_send_IPI_dest_field(mask, vector, apic->dest_logical);
  -	local_irq_restore(flags);
  +  default_send_IPI_mask_sequence_logical(cpumask, vector);
   }

   void default_send_IPI_allbutself(int vector)
   {
  -	/*
  -	 * if there are no other CPUs in the system then we get an APIC send
  -	 * error if we try to broadcast, thus avoid sending IPIs in this case.
  -	 */
  -	if (!(num_online_cpus() > 1))
  -		return;
  -
  -	__default_local_send_IPI_allbutself(vector);
  +  struct cpumask m = CPU_MASK_ALL;
  +  default_send_IPI_mask_allbutself_phys(&m, vector);
   }

   void default_send_IPI_all(int vector)
   {
  -	__default_local_send_IPI_all(vector);
  +  struct cpumask m = CPU_MASK_ALL;
  +  default_send_IPI_mask_sequence_logical(&m, vector);
   }

   void default_send_IPI_self(int vector)
  -{
  -	__default_send_IPI_shortcut(APIC_DEST_SELF, vector, apic->dest_logical);
  +{ 
  +  QSIM_REMOTE_INTERRUPT(smp_processor_id(), vector);
   }

   /* must come after the send_IPI functions above for inlining */
   static int convert_apicid_to_cpu(int apic_id)
   {
  -	int i;
  -
  -	for_each_possible_cpu(i) {
  -		if (per_cpu(x86_cpu_to_apicid, i) == apic_id)
  -			return i;
  -	}
  -	return -1;
  +	return apic_id;
   }

   int safe_smp_processor_id(void)

Replace the ordinary method for figuring out the number and arrangement of processors in a
machine with the magic instruction interface.

  diff -u -r linux-2.6.34/arch/x86/kernel/mpparse.c linux-2.6.34.qsim//arch/x86/kernel/mpparse.c
  --- linux-2.6.34/arch/x86/kernel/mpparse.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/kernel/mpparse.c	2011-10-06 03:09:50.000000000 -0400
  @@ -6,6 +6,11 @@
    *	(c) 1998, 1999, 2000, 2009 Ingo Molnar <mingo@redhat.com>
    *      (c) 2008 Alexey Starikovskiy <astarikovskiy@suse.de>
    */
  +static inline unsigned int QSIM_CPUCOUNT() {
  +  unsigned int r;
  +  asm("cpuid;" : "=a"(r) : "a"(0xc7c7c7c7) : "%ebx", "%ecx", "%edx");
  +  return r;
  +}

   #include <linux/mm.h>
   #include <linux/init.h>
  @@ -500,6 +505,12 @@
          int linttypes[2] = { mp_ExtINT, mp_NMI };
          int i;

  +        /*
  +	 * QSim is hijacking this function to be the init point for CPUs, so 
  +         * there may be more than 2.
  +         */
  +	unsigned qsim_n_cpus = QSIM_CPUCOUNT();
  +
          /*
           * local APIC has default address
           */
  @@ -517,7 +528,8 @@
          processor.featureflag = boot_cpu_data.x86_capability[0];
          processor.reserved[0] = 0;
          processor.reserved[1] = 0;
  -	for (i = 0; i < 2; i++) {
  +
  +	for (i = 0; i < qsim_n_cpus-1; i++) {
                  processor.apicid = i;
                  MP_processor_info(&processor);
          }
  @@ -603,61 +615,10 @@
   /*
    * Scan the memory blocks for an SMP configuration block.
    */
  +
   void __init default_get_smp_config(unsigned int early)
   {
  -	struct mpf_intel *mpf = mpf_found;
  -
  -	if (!mpf)
  -		return;
  -
  -	if (acpi_lapic && early)
  -		return;
  -
  -	/*
  -	 * MPS doesn't support hyperthreading, aka only have
  -	 * thread 0 apic id in MPS table
  -	 */
  -	if (acpi_lapic && acpi_ioapic)
  -		return;
  -
  -	printk(KERN_INFO "Intel MultiProcessor Specification v1.%d\n",
  -	       mpf->specification);
  -#if defined(CONFIG_X86_LOCAL_APIC) && defined(CONFIG_X86_32)
  -	if (mpf->feature2 & (1 << 7)) {
  -		printk(KERN_INFO "    IMCR and PIC compatibility mode.\n");
  -		pic_mode = 1;
  -	} else {
  -		printk(KERN_INFO "    Virtual Wire compatibility mode.\n");
  -		pic_mode = 0;
  -	}
  -#endif
  -	/*
  -	 * Now see if we need to read further.
  -	 */
  -	if (mpf->feature1 != 0) {
  -		if (early) {
  -			/*
  -			 * local APIC has default address
  -			 */
  -			mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
  -			return;
  -		}
  -
  -		printk(KERN_INFO "Default MP configuration #%d\n",
  -		       mpf->feature1);
  -		construct_default_ISA_mptable(mpf->feature1);
  -
  -	} else if (mpf->physptr) {
  -		if (check_physptr(mpf, early))
  -			return;
  -	} else
  -		BUG();
  -
  -	if (!early)
  -		printk(KERN_INFO "Processors: %d\n", num_processors);
  -	/*
  -	 * Only use the first configuration found.
  -	 */
  +	construct_default_ISA_mptable(5);
   }

   static void __init smp_reserve_memory(struct mpf_intel *mpf)

QSim also does not provide a CMOS clock, so instead always say that it is Unix time 0.
This has the added advantage of making execution within QSim deterministic.

  diff -u -r linux-2.6.34/arch/x86/kernel/rtc.c linux-2.6.34.qsim//arch/x86/kernel/rtc.c
  --- linux-2.6.34/arch/x86/kernel/rtc.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/kernel/rtc.c	2011-10-06 01:35:29.000000000 -0400
  @@ -97,50 +97,7 @@

   unsigned long mach_get_cmos_time(void)
   {
  -	unsigned int status, year, mon, day, hour, min, sec, century = 0;
  -
  -	/*
  -	 * If UIP is clear, then we have >= 244 microseconds before
  -	 * RTC registers will be updated.  Spec sheet says that this
  -	 * is the reliable way to read RTC - registers. If UIP is set
  -	 * then the register access might be invalid.
  -	 */
  -	while ((CMOS_READ(RTC_FREQ_SELECT) & RTC_UIP))
  -		cpu_relax();
  -
  -	sec = CMOS_READ(RTC_SECONDS);
  -	min = CMOS_READ(RTC_MINUTES);
  -	hour = CMOS_READ(RTC_HOURS);
  -	day = CMOS_READ(RTC_DAY_OF_MONTH);
  -	mon = CMOS_READ(RTC_MONTH);
  -	year = CMOS_READ(RTC_YEAR);
  -
  -#ifdef CONFIG_ACPI
  -	if (acpi_gbl_FADT.header.revision >= FADT2_REVISION_ID &&
  -	    acpi_gbl_FADT.century)
  -		century = CMOS_READ(acpi_gbl_FADT.century);
  -#endif
  -
  -	status = CMOS_READ(RTC_CONTROL);
  -	WARN_ON_ONCE(RTC_ALWAYS_BCD && (status & RTC_DM_BINARY));
  -
  -	if (RTC_ALWAYS_BCD || !(status & RTC_DM_BINARY)) {
  -		sec = bcd2bin(sec);
  -		min = bcd2bin(min);
  -		hour = bcd2bin(hour);
  -		day = bcd2bin(day);
  -		mon = bcd2bin(mon);
  -		year = bcd2bin(year);
  -	}
  -
  -	if (century) {
  -		century = bcd2bin(century);
  -		year += century * 100;
  -		printk(KERN_INFO "Extended CMOS year: %d\n", century * 100);
  -	} else
  -		year += CMOS_YEARS_OFFS;
  -
  -	return mktime(year, mon, day, hour, min, sec);
  +        return 0;
   }

   /* Routines for accessing the CMOS RAM/RTC. */

Always call get_smp_config(), because in QSim we won't find out additional processors
before we call this function (in mpparse.c).

  diff -u -r linux-2.6.34/arch/x86/kernel/setup.c linux-2.6.34.qsim//arch/x86/kernel/setup.c
  --- linux-2.6.34/arch/x86/kernel/setup.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/kernel/setup.c	2011-10-06 00:40:41.000000000 -0400
  @@ -1015,8 +1015,9 @@

          /*
           * get boot-time SMP configuration:
  +         * QSim modification: Always call this function.
           */
  -	if (smp_found_config)
  +	if (1)
                  get_smp_config();

          prefill_possible_map();

Modify bootstrapping procedure to use magic instructions instead of the APIC.

  diff -u -r linux-2.6.34/arch/x86/kernel/smpboot.c linux-2.6.34.qsim//arch/x86/kernel/smpboot.c
  --- linux-2.6.34/arch/x86/kernel/smpboot.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/kernel/smpboot.c	2011-10-06 01:03:35.000000000 -0400
  @@ -76,6 +76,13 @@
   static int low_mappings;
   #endif

  +/* Use magic instruction to boot other CPUs. */
  +static inline void QSIM_BOOTSTRAP(u16 cpu, u32 addr) {
  +  asm("mov %0, %%eax;\n cpuid;\n"
  +      "mov %1, %%eax;\n cpuid;\n" :: "r"(0xb0070000 | cpu), "r"(addr) :
  +      "%eax", "%ebx", "%edx", "%ecx" );
  +}
  +
   /* State of each CPU */
   DEFINE_PER_CPU(int, cpu_state) = { 0 };

  @@ -554,8 +561,9 @@
   static int __cpuinit
   wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
   {
  -	unsigned long send_status, accept_status = 0;
  +	unsigned long send_status = 0, accept_status = 0;
          int maxlvt, num_starts, j;
  +        static u16 cur_cpu = 1;

          maxlvt = lapic_get_maxlvt();

  @@ -568,30 +576,8 @@
                  apic_read(APIC_ESR);
          }

  -	pr_debug("Asserting INIT.\n");
  -
  -	/*
  -	 * Turn INIT on target chip
  -	 */
  -	/*
  -	 * Send IPI
  -	 */
  -	apic_icr_write(APIC_INT_LEVELTRIG | APIC_INT_ASSERT | APIC_DM_INIT,
  -		       phys_apicid);
  -
  -	pr_debug("Waiting for send to finish...\n");
  -	send_status = safe_apic_wait_icr_idle();
  -
  -	mdelay(10);
  -
  -	pr_debug("Deasserting INIT.\n");
  -
  -	/* Target chip */
  -	/* Send IPI */
  -	apic_icr_write(APIC_INT_LEVELTRIG | APIC_DM_INIT, phys_apicid);
  -
  -	pr_debug("Waiting for send to finish...\n");
  -	send_status = safe_apic_wait_icr_idle();
  +        printk("QSIM_BOOTSTRAP(%d, %08x)\n", cur_cpu, start_eip);
  +        QSIM_BOOTSTRAP(cur_cpu++, start_eip);

          mb();
          atomic_set(&init_deasserted, 1);
  @@ -630,12 +616,6 @@
                   * STARTUP IPI
                   */

  -		/* Target chip */
  -		/* Boot on the stack */
  -		/* Kick the second */
  -		apic_icr_write(APIC_DM_STARTUP | (start_eip >> 12),
  -			       phys_apicid);
  -
                  /*
                   * Give the other CPU some time to accept the IPI.
                   */
  @@ -644,17 +624,11 @@
                  pr_debug("Startup point 1.\n");

                  pr_debug("Waiting for send to finish...\n");
  -		send_status = safe_apic_wait_icr_idle();

                  /*
                   * Give the other CPU some time to accept the IPI.
                   */
                  udelay(200);
  -		if (maxlvt > 3)		/* Due to the Pentium erratum 3AP.  */
  -			apic_write(APIC_ESR, 0);
  -		accept_status = (apic_read(APIC_ESR) & 0xEF);
  -		if (send_status || accept_status)
  -			break;
          }
          pr_debug("After Startup.\n");

  @@ -872,12 +846,6 @@

          pr_debug("++++++++++++++++++++=_---CPU UP  %u\n", cpu);

  -	if (apicid == BAD_APICID || apicid == boot_cpu_physical_apicid ||
  -	    !physid_isset(apicid, phys_cpu_present_map)) {
  -		printk(KERN_ERR "%s: bad cpu %d\n", __func__, cpu);
  -		return -EINVAL;
  -	}
  -
          /*
           * Already booted CPU?
           */
  @@ -992,20 +960,6 @@
          }

          /*
  -	 * If we couldn't find an SMP configuration at boot time,
  -	 * get out of here now!
  -	 */
  -	if (!smp_found_config && !acpi_lapic) {
  -		preempt_enable();
  -		printk(KERN_NOTICE "SMP motherboard not detected.\n");
  -		disable_smp();
  -		if (APIC_init_uniprocessor())
  -			printk(KERN_NOTICE "Local APIC not detected."
  -					   " Using dummy APIC emulation.\n");
  -		return -1;
  -	}
  -
  -	/*
           * Should not be necessary because the MP table should list the boot
           * CPU too, but we do it for the sake of robustness anyway.
           */

This patch was needed to allow the kernel build process to succeed on newer versions of
the GNU toolchain.

  diff -u -r linux-2.6.34/arch/x86/vdso/Makefile linux-2.6.34.qsim//arch/x86/vdso/Makefile
  --- linux-2.6.34/arch/x86/vdso/Makefile	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//arch/x86/vdso/Makefile	2011-10-06 00:53:16.000000000 -0400
  @@ -25,7 +25,7 @@

   export CPPFLAGS_vdso.lds += -P -C

  -VDSO_LDFLAGS_vdso.lds = -m elf_x86_64 -Wl,-soname=linux-vdso.so.1 \
  +VDSO_LDFLAGS_vdso.lds = -m64 -Wl,-soname=linux-vdso.so.1 \
                          -Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096

   $(obj)/vdso.o: $(src)/vdso.S $(obj)/vdso.so
  @@ -69,7 +69,7 @@
   vdso32-images			= $(vdso32.so-y:%=vdso32-%.so)

   CPPFLAGS_vdso32.lds = $(CPPFLAGS_vdso.lds)
  -VDSO_LDFLAGS_vdso32.lds = -m elf_i386 -Wl,-soname=linux-gate.so.1
  +VDSO_LDFLAGS_vdso32.lds = -m32 -Wl,-soname=linux-gate.so.1

   # This makes sure the $(obj) subdirectory exists even though vdso32/
   # is not a kbuild sub-make subdirectory.

This makes serial output go to the QSim console instead of being sent to nonexistent
serial ports.

  diff -u -r linux-2.6.34/drivers/serial/8250.c linux-2.6.34.qsim//drivers/serial/8250.c
  --- linux-2.6.34/drivers/serial/8250.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//drivers/serial/8250.c	2011-10-06 02:44:30.000000000 -0400
  @@ -49,6 +49,12 @@
   #include "suncore.h"
   #endif

  +/* Use to redirect serial output to QSim console via magic instructions */
  +static inline void QSIM_OUT(char i) {
  +  asm("cpuid;" : : "a" ((0xff&i)|0xc501e000) : "%ebx", "%edx", "%ecx");
  +}
  +
  +
   /*
    * Configuration:
    *   share_irqs - whether we pass IRQF_SHARED to request_irq().  This option
  @@ -479,53 +485,13 @@

   static void io_serial_out(struct uart_port *p, int offset, int value)
   {
  -	offset = map_8250_out_reg(p, offset) << p->regshift;
  -	outb(value, p->iobase + offset);
  +        QSIM_OUT(value);
   }

   static void set_io_from_upio(struct uart_port *p)
   {
  -	struct uart_8250_port *up = (struct uart_8250_port *)p;
  -	switch (p->iotype) {
  -	case UPIO_HUB6:
  -		p->serial_in = hub6_serial_in;
  -		p->serial_out = hub6_serial_out;
  -		break;
  -
  -	case UPIO_MEM:
  -		p->serial_in = mem_serial_in;
  -		p->serial_out = mem_serial_out;
  -		break;
  -
  -	case UPIO_RM9000:
  -	case UPIO_MEM32:
  -		p->serial_in = mem32_serial_in;
  -		p->serial_out = mem32_serial_out;
  -		break;
  -
  -#ifdef CONFIG_SERIAL_8250_AU1X00
  -	case UPIO_AU:
  -		p->serial_in = au_serial_in;
  -		p->serial_out = au_serial_out;
  -		break;
  -#endif
  -	case UPIO_TSI:
  -		p->serial_in = tsi_serial_in;
  -		p->serial_out = tsi_serial_out;
  -		break;
  -
  -	case UPIO_DWAPB:
  -		p->serial_in = mem_serial_in;
  -		p->serial_out = dwapb_serial_out;
  -		break;
  -
  -	default:
  -		p->serial_in = io_serial_in;
  -		p->serial_out = io_serial_out;
  -		break;
  -	}
  -	/* Remember loaded iotype */
  -	up->cur_iotype = p->iotype;
  +        p->serial_in = io_serial_in;
  +        p->serial_out = io_serial_out;
   }

   static void

This makes the context switch function tell QSim the TID that the CPU is switching to, and
whether that is the idle task.

  diff -u -r linux-2.6.34/kernel/sched.c linux-2.6.34.qsim//kernel/sched.c
  --- linux-2.6.34/kernel/sched.c	2010-05-16 17:17:36.000000000 -0400
  +++ linux-2.6.34.qsim//kernel/sched.c	2011-10-06 00:59:09.000000000 -0400
  @@ -2907,6 +2907,10 @@
   {
          struct mm_struct *mm, *oldmm;

  +        /* Tell QSim which task is next/if it's the idle task. */
  +        if (next == rq->idle) asm("cpuid;\n":: "a"(0x1d1e1d1e));
  +        else asm("cpuid;\n":: "a"(0xc75c0000|((u16)(next->pid))));
  +
          prepare_task_switch(rq, prev, next);
          trace_sched_switch(rq, prev, next);
          mm = next->mm;
